#!/bin/sh
### BEGIN INIT INFO
# Provides:          archiva
# Required-Start:    $network $local_fs $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: <Enter a short description of the sortware>
# Description:       <Enter a long description of the software>
#                    <...>
#                    <...>
### END INIT INFO

# Author: Andrew Otto (WMF) <otto@wikimedia.org>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Apache Archiva"    # Introduce a short description here
NAME=archiva             # Introduce the short server's name here
DAEMON=/usr/sbin/archiva # Introduce the server's location here
RUNDIR=/var/run/$NAME
PIDFILE=$RUNDIR/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# # The following variables can be overwritten in $DEFAULT
#
# Run kafka as this user ID and group ID
ARCHIVA_USER=archiva
ARCHIVA_GROUP=archiva
ARCHIVA_OPTS=""

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions


# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Arguments to run the daemon with
DAEMON_ARGS="/etc/archiva/archiva.conf wrapper.syslog.ident=$NAME wrapper.pidfile=$PIDFILE wrapper.daemonize=TRUE $ARCHIVA_OPTS"


# Make sure /var/run/archiva exists and is writeable by archiva user.
test -d $RUNDIR || mkdir -p $RUNDIR || (echo "Could not create $RUNDIR for $NAME pidfile.  Aborting."; exit 1)
if [ "$(stat -c '%U:%G' $RUNDIR)" != "$ARCHIVA_USER:$ARCHIVA_GROUP" ]; then
  chown $ARCHIVA_USER:$ARCHIVA_GROUP $RUNDIR || (echo "Could not chown $RUNDIR to $ARCHIVA_USER:$ARCHIVA_NAME.  Aborting"; exit 1)
fi

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet -u $ARCHIVA_USER -g $ARCHIVA_GROUP \
		-c $ARCHIVA_USER --pidfile $PIDFILE --exec $DAEMON --test -- $DAEMON_ARGS > /dev/null
	RETVAL=$?

	if [ $RETVAL -eq 1 ]; then
		[ "$VERBOSE" != no ] && log_warning_msg "(already running)"
	else
		start-stop-daemon --start --quiet -u $ARCHIVA_USER -g $ARCHIVA_GROUP \
			-c $ARCHIVA_USER --pidfile $PIDFILE --exec $DAEMON -- $DAEMON_ARGS
		RETVAL=$?
	fi

	return $RETVAL
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet -u $ARCHIVA_USER --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	if [ $RETVAL -eq 1 ]; then
		if [ -f $PIDFILE ]; then
			log_warning_msg "(not running but pid file exists, cleaning up)"
			rm -f $PIDFILE
		else
			log_warning_msg "(not running)"
		fi
	fi

	return "$RETVAL"
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC "
    do_start
    case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
  ;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  restart|force-reload)
	log_daemon_msg "Restarting $DESC"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
